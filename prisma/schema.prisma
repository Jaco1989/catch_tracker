generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  SYSTEMADMINISTRATOR
  SECURITYADMINISTRATOR
  PERMITADMINISTRATOR
  PERMITHOLDER
  RIGHTSHOLDER
  SKIPPER
  INSPECTOR
  MONITOR
  DRIVER
  FACTORYSTOCKCONTROLLER
  LOCALOUTLETCONTROLLER
  EXPORTCONTROLLER
}

model User {
  id String @id @default(uuid())

  username      String   @unique
  firstName     String
  lastName      String
  displayName   String
  email         String   @unique
  passwordHash  String
  phoneNumber   String   @default("")
  streetAddress String
  addressLine2  String?
  suburb        String?
  townCity      String
  postcode      String
  country       String
  avatarUrl     String?
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(false)
  lastLogin     DateTime @default(now())
  agreeTerms    Boolean  @default(false)

  role            UserRole  @default(USER)
  roleApplication UserRole  @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Session         Session[]
  Quota           Quota[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Quota {
  id                   String   @id @default(uuid())
  rightsNr             String
  quotaCode            String
  rightsHolder         String
  sectorName           String
  quotaAllocation      Float
  overcatch20232024    Float
  finalQuotaAllocation Float
  quotaUsed            Float
  quotaBalance         Float
  expiryDate           DateTime
  dateIssued           DateTime @default("2024-11-15T00:00:00Z")
  season               String
  area3_4              Float?
  area7                Float?
  area8                Float?
  area11               Float?
  nearshoreZone        String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quotas")
}
